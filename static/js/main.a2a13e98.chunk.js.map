{"version":3,"sources":["features/userSlice.js","HeaderOption.js","firebase.js","Header.js","Sidebar.js","InputOptions.js","Post.js","Feed.js","Widget.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","HeaderOption","Icon","title","avatar","onClick","useSelector","className","Avatar","src","email","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","Header","dispatch","useDispatch","alt","placeholder","type","HomeIcon","SupervisorAccountIcon","AccessibilityIcon","CalendarTodayIcon","AccountBoxIcon","signOut","Sidebar","displayName","InputOptions","color","Post","forwardRef","ref","description","message","photoUrl","ThumbUpAltOutlined","CommentIcon","ShareIcon","SendIcon","Feed","useState","input","setinput","posts","setposts","useEffect","collection","orderBy","onSnapshot","snapShot","docs","map","doc","id","data","value","onChange","e","target","preventDefault","add","timestamp","FieldValue","serverTimestamp","PhotoIcon","SubscriptionsIcon","EventNoteIcon","CalendarViewDayIcon","Widget","newsArticle","heading","subtitle","FiberManualRecordOutlined","Login","setname","setemail","password","setpassword","profilePic","setprofilePic","signInWithEmailAndPassword","then","userAuth","uid","profileUrl","photoURL","catch","error","alert","createUserWithEmailAndPassword","updateProfile","App","onAuthStateChanged","configureStore","reducer","userReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2a13e98.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.user = action.payload;\r\n    },\r\n    logout: state => {\r\n      state.user = null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React from 'react'\r\nimport './HeaderOption.css'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { selectUser } from './features/userSlice';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nfunction HeaderOption({Icon, title, avatar, onClick}) {\r\n\r\n    const user = useSelector(selectUser)\r\n\r\n    return (\r\n        <div onClick={onClick}  className=\"header_options\">\r\n\r\n            {Icon && <Icon className='header_option_icon' />}\r\n\r\n            {avatar && < Avatar className='header_option_icon' src=\"/broken-image.jpg\"> \r\n            {user?.email[0]}  </Avatar>}\r\n\r\n\r\n\r\n            {title && (<h3 className=\"header_option_title\" > {title} </h3>) }\r\n            \r\n            {/* can be read as if there is user.photourl then use that as a source \r\n            else use the first letter of email */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeaderOption;\r\n","import firebase from 'firebase';\r\n// here we intialize app with the line 3\r\n// amd inside we provide necessary config keys we received from firebase\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyC0DIWvVooqQoZaC52geUUJq005brGIlIA\",\r\n  authDomain: \"linkdein-clone-yt-real.firebaseapp.com\",\r\n  projectId: \"linkdein-clone-yt-real\",\r\n  storageBucket: \"linkdein-clone-yt-real.appspot.com\",\r\n  messagingSenderId: \"1006181291865\",\r\n  appId: \"1:1006181291865:web:150a707f5bd4b473f8de48\",\r\n  measurementId: \"G-1M0REW185Z\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n  //db is just a variable stadnig for database\r\nconst auth = firebase.auth();\r\n// to get authentication; to have login options\r\nexport {db, auth};\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n\r\n// import firebase from './firebase';\r\n\r\n\r\n// // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n// const firebaseConfig = {\r\n//     apiKey: \"AIzaSyDu56RLavWHJRkC3fWNWeM9G5YiZZS2UJ8\",\r\n//     authDomain: \"linkedin-clone-yt-259be.firebaseapp.com\",\r\n//     projectId: \"linkedin-clone-yt-259be\",\r\n//     storageBucket: \"linkedin-clone-yt-259be.appspot.com\",\r\n//     messagingSenderId: \"933725959034\",\r\n//     appId: \"1:933725959034:web:eb2a99d4d7b66056b91cc3\",\r\n//     measurementId: \"G-LP15S75JBY\"\r\n//   };\r\n\r\n//   const firebase = firebase.initializeApp(firebaseConfig);\r\n//   const db = firebaseApp.firestore();\r\n//   const auth = firebase.auth();\r\n\r\n//   export  default {db, auth};\r\n","import React from 'react'\r\nimport \"./Header.css\"\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport HeaderOption from './HeaderOption.js';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport AccessibilityIcon from '@material-ui/icons/Accessibility';\r\nimport CalendarTodayIcon from '@material-ui/icons/CalendarToday';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { auth, db } from './firebase';\r\nimport { logout, selectUser } from './features/userSlice';\r\n\r\n\r\n\r\n\r\nfunction Header() {\r\n\r\n    const user = useSelector(selectUser)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutofApp = () => {\r\n        dispatch(logout());\r\n        auth.signOut();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className='header'>\r\n            <div className='header_left'>\r\n                <img alt='' src = \"https://content.linkedin.com/content/dam/me/business/en-us/amp/brand-site/v2/bg/LI-Bug.svg.original.svg\"/>\r\n                <div className='header_search'>\r\n                    <SearchIcon  />\r\n                    <input placeholder=\"SearchUj\" type=\"text\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"header_right\">\r\n                < HeaderOption Icon={HomeIcon} title= \"Home\" />\r\n                < HeaderOption Icon={SupervisorAccountIcon} title= \"MyNetwork\" />\r\n                < HeaderOption Icon={AccessibilityIcon} title= \"Accessibility\" />\r\n                < HeaderOption Icon={CalendarTodayIcon} title= \"Calendar\" />\r\n                < HeaderOption Icon={AccountBoxIcon} title= \"Profile\" />\r\n                {/* here we provide avatara as boolean value just so that\r\n                it checks in HeaderOptions.js and gets out only when it has to */}\r\n                <HeaderOption  onClick={logoutofApp} title= \"LogOut🙋‍♂\" avatar=\"1\" />\r\n                {/* here logoutofApp is provided as a prop \r\n                for the headeroption function; so powerful and efficient\r\n                and amazing how one thibg gets connected to another */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './features/userSlice';\r\nimport './Sidebar.css';\r\n\r\n\r\n\r\nfunction Sidebar() {\r\n\r\n    const user = useSelector(selectUser)\r\n    // every user details that we see inside the redux-dev tools\r\n    // is only now accessible through this\r\n\r\n\r\n\r\n    // displayName and email used below are the original dataname\r\n    // provided by firebase\r\n\r\n\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className='sidebar_top'>\r\n                <img src=\"https://images.all-free-download.com/images/templates_large/blue_sky_template_1514.jpg\" alt=\"\" />\r\n                <Avatar className=\"sidebar_avatar\" >{user.email[0]}</Avatar>\r\n                <h2>{user.displayName}</h2>\r\n                <h4>{user.email}</h4>\r\n            </div>\r\n            <div className=\"sidebar_stats\">\r\n                <div className=\"sidebarstats_css\">\r\n                    <p className='sidebar_stat'>How many people viewed your profile ?  </p>\r\n                    <p className='sidebar_statnumber' >2000</p>\r\n                </div>\r\n                <div className=\"sidebarstats_css\" >\r\n                    <p className='sidebar_stat'>Total views on your posts. </p>\r\n                    <p className='sidebar_statnumber'>5789</p> \r\n                </div>              \r\n            </div>\r\n\r\n            <div className='sidebar_bottom'>\r\n                <p className=\"recent\"> Recent</p>\r\n                <div className='rest_center'>\r\n                    <p>...</p>\r\n                    <p>..</p>\r\n                    <p>.</p>\r\n                </div>\r\n               \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react'\r\nimport './InputOptions.css'\r\n\r\n\r\nfunction InputOptions({Icon, title, color}) {\r\n    return (\r\n        <div className='inputOptions'>\r\n           <Icon className='inputoptions_icon' />\r\n           {/* style={{color:color}} u can add this insid for the color \r\n           you want in icons */}\r\n           <h4>{title}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputOptions\r\n","import { Avatar } from '@material-ui/core'\r\nimport { ThumbUpAltOutlined } from '@material-ui/icons'\r\nimport React, { forwardRef } from 'react'\r\nimport InputOptions from './InputOptions'\r\nimport './Post.css'\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\n\r\nconst Post = forwardRef( ({name, description, message, photoUrl}, ref) => {\r\n\r\n  \r\n\r\n    return (\r\n        <div ref={ref} className=\"post \">\r\n            <div className=\"post_header\">\r\n                <Avatar src={photoUrl} > {name[0]} </Avatar>\r\n            {/*  src={photoUrl} inside avatar */}\r\n                <div className=\"post_info\">\r\n                    <h2>{name}</h2>\r\n                    <p>{description}</p>\r\n                </div>\r\n            </div>\r\n            <div className='post_body'>\r\n                <p>{message}</p>\r\n            </div>\r\n            <div className='post_buttons'>\r\n                <InputOptions Icon ={ThumbUpAltOutlined} title='Like'\r\n                color='gray'/>\r\n                 <InputOptions Icon ={CommentIcon} title='Comment'\r\n                color='gray'/>\r\n                 <InputOptions Icon ={ShareIcon} title='Share'\r\n                color='gray'/>\r\n                 <InputOptions Icon ={SendIcon} title='Send'\r\n                color='gray'/>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Post\r\n","import React, { useState, useEffect } from 'react'\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport './Feed.css';\r\nimport InputOptions from './InputOptions'\r\nimport PhotoIcon from '@material-ui/icons/Photo';\r\nimport SubscriptionsIcon from '@material-ui/icons/Subscriptions';\r\nimport EventNoteIcon from '@material-ui/icons/EventNote';\r\nimport CalendarViewDayIcon from '@material-ui/icons/CalendarViewDay';\r\nimport Post from './Post.js';\r\nimport { db, auth } from './firebase.js';\r\nimport firebase from 'firebase';\r\nimport {  selectUser } from './features/userSlice';\r\nimport {  useSelector } from 'react-redux';\r\nimport FlipMove from 'react-flip-move';\r\n\r\n\r\n\r\n\r\nfunction Feed() {\r\n\r\n    const [input, setinput] = useState([])\r\n    const [posts, setposts] = useState([])\r\n\r\n    const user = useSelector(selectUser)\r\n\r\n\r\n    useEffect(() => {\r\n        db.collection('posts').orderBy(\"timestamp\", \"desc\").onSnapshot((snapShot) =>\r\n            setposts(snapShot.docs.map(doc =>\r\n                ({\r\n                    id: doc.id,\r\n                    data: doc.data()\r\n                })\r\n            ))\r\n        )\r\n    }, [])\r\n\r\n    const sendPost = (e) => {\r\n        e.preventDefault();\r\n\r\n        db.collection('posts').add({\r\n            name: user.displayName  ,\r\n            description: user.email,\r\n            message: input,\r\n            photoUrl:  '', //the logical or here is interesting\r\n            timestamp : firebase.firestore.FieldValue.serverTimestamp(),\r\n            // this syncs for diff usersin diff time as per sever time\r\n        })\r\n\r\n        setinput([]);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className='feed'>\r\n            <div className='feed_inputContainer'>\r\n                <div className='feed_input'>\r\n                    <CreateIcon />\r\n                    <form >\r\n                        {/* the line below is imp especailly how {input } is used */}\r\n                        <input value ={input} type='text'\r\n                         onChange={e => setinput(e.target.value)} placeholder='Start a post...'  />\r\n                         {/* onChange={e => setinput(e.target.value) because of this code \r\n                            we were able to type in search bar otherwise\r\n                            the useState ficntion will just set it to blank */}\r\n                        <button type='submit' onClick={sendPost} >Post</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='feed_inputoptions'>\r\n                <InputOptions className='inputoptions_icon' Icon={PhotoIcon}  title='Photo' color='#70B5F9'/>\r\n                <InputOptions Icon={SubscriptionsIcon}  title='Video' color='#70B5F9'/>\r\n                <InputOptions Icon={EventNoteIcon}  title='Event' color='#70B5F9'/>\r\n                <InputOptions Icon={CalendarViewDayIcon}  title='Text' color='#70B5F9'/>\r\n            </div>\r\n\r\n            <div>\r\n                <FlipMove>\r\n\r\n                    {/* THIS IS WHERE WE HAVE COMPONENT TO WRITE A POST */}\r\n                {posts.map(({id, data:{name, description, message,photoUrl}}) =>\r\n                //    key is very very important, so that we can identify and its very\r\n                // imp to provde eveyrtime as it is how react will identify it\r\n                   (\r\n                     <Post key={id} name={name}  description={description} message={message} photoUrl={photoUrl} />\r\n                    ) )}\r\n                    {/* this fix was given by e20 in discord */}\r\n\r\n\r\n                {/* <Post name='Ujjwal Khadka' description='just a test'\r\n                message='Namaskar, k xa???' /> */}\r\n                </FlipMove>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feed\r\n","import { FiberManualRecord, FiberManualRecordOutlined } from '@material-ui/icons'\r\nimport React from 'react'\r\nimport './Widget.css'\r\nfunction Widget() {\r\n\r\n    const newsArticle = (heading, subtitle) =>{\r\n       return( <div className='widgetArticle'>\r\n            <div className='widgetArticle_left'>\r\n                <FiberManualRecordOutlined />\r\n            </div>\r\n            <div className='WidgetArticle_right'>\r\n                <h4>{heading}</h4>\r\n                <p>{subtitle}</p>\r\n            </div>\r\n        </div>\r\n       )}\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className='widget'>\r\n            <div className='widget_header'>\r\n                <h2 className='widget_h2'>Today’s most viewed courses</h2>\r\n                </div>\r\n            <div className='widget_news'>\r\n                {newsArticle(' The Six Morning Habits of High Performers', 'Pete Mockaitis | How to Be Awesome at Your Job' ) }\r\n                {newsArticle ('2. Mastering Self-Leadership', 'Laurie Ruettimann')}\r\n                {newsArticle ('3. Critical Thinking for Better Judgment and Decision-Making', 'Becki Saltzman')}\r\n            \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Widget\r\n","import React, { useState } from 'react'\r\nimport './Login.css'\r\nimport {auth} from './firebase'\r\nimport { useDispatch,  } from 'react-redux'\r\nimport {login,  } from './features/userSlice'\r\n\r\nfunction Login() {\r\n\r\n    // What is a Hook? A Hook is a special function that lets\r\n    // you “hook into” React features. For example, useState is a\r\n    // Hook that lets you add React state to function components \r\n    // This JavaScript syntax is called “array destructuring”.\r\n    //  It means that we’re making two new variables name and setname,\r\n    //  where name is set to the first value returned by useState,\r\n    //  and setname is the second. \r\n\r\n\r\n    const [name, setname] = useState('')\r\n    const [email, setemail] = useState('')\r\n    const [password, setpassword] = useState('')\r\n    const [profilePic, setprofilePic] = useState('')\r\n    \r\n    // This hook returns a reference to the dispatch function from the \r\n    // Redux store. You may use it to dispatch actions as needed.\r\n    const dispatch = useDispatch() \r\n\r\n\r\n\r\n\r\n\r\n    const loginToApp = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        auth.signInWithEmailAndPassword(email, password)\r\n        .then((userAuth)=> {\r\n            dispatch(login=>({\r\n                email:userAuth.user.email,\r\n                uid: userAuth.user.uid,\r\n                displayName: userAuth.user.displayName,\r\n                profileUrl: userAuth.user.photoURL\r\n            }))\r\n        }).catch(error => alert(error))\r\n    }\r\n\r\n\r\n\r\n    \r\n    const register = () => {\r\n        if (!name) {\r\n            return alert('No value supplied')\r\n        }\r\n            auth.createUserWithEmailAndPassword(email, password) //here we create a user\r\n            .then((userAuth) =>{\r\n                userAuth.user.updateProfile({\r\n                    displayName: name,\r\n                    photoURL: profilePic || '',\r\n                })\r\n                .then(() => {\r\n                    dispatch(login({\r\n                        email: userAuth.user.email,\r\n                        uid: userAuth.user.uid,\r\n                        displayName: name, \r\n                        photoURL: profilePic\r\n                    }))\r\n                })\r\n            }).catch(error => alert(error))\r\n        }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className='login'>\r\n            {/* this page is rendered only when you haven't been logged in */}\r\n            <img src='https://content.linkedin.com/content/dam/me/business/en-us/amp/brand-site/v2/bg/LI-Logo.svg.original.svg' alt='' />\r\n            <form className='formcontainer'>\r\n                <input value={name} onChange={e => setname(e.target.value)} placeholder='FullName' type='text'/>\r\n                <input value={profilePic} onChange={e => setprofilePic(e.target.value)} placeholder='Profile pic url(optional)' type='text'/>\r\n                <input value={email} onChange={e => setemail(e.target.value)} placeholder='Email' type='text'/>\r\n                <input value={password} onChange={e => setpassword(e.target.value)} placeholder='Password' type='password'/>\r\n                <button type='submit' onClick={loginToApp}>Sign In</button>\r\n                \r\n\r\n            </form>\r\n            <p>Not a member?   \r\n                    <span className='login_register'\r\n                    onClick={register}>\r\n                        \r\n                      Register Now\r\n                    </span> \r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import './App.css';\nimport Header from './Header.js'\nimport Sidebar from './Sidebar'\nimport Feed from './Feed'\nimport Widget from './Widget'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, logout, selectUser } from './features/userSlice';\nimport Login from './Login'\nimport React, { useEffect } from 'react'\nimport { auth } from './firebase';\n\n// a lot of fucntion we use here  especially related to\n// firebase are already provided in firebase codelab\n// go check it; it's kinda easy after you have implemented it few \n// times\n\n\n\nfunction App() {\n\n  // this is how we access our user in redux\n\n  // Allows you to extract data from the Redux store state, using a selector function.\n  const user = useSelector(selectUser); \n  \n  const dispatch = useDispatch()\n\n// here we first implemented register function\n// where we registered with necessary(after enabling email/password)\n// function in firebase. when we saved it, it got saved in firebase user\n// authentication page. Later, we created  useEfffect function in App.js\n// through which we update the state of our page when we had change in\n// authentication state\n  useEffect(() => {\n      auth.onAuthStateChanged((userAuth) =>{\n        if (userAuth) {\n          // unlike in logut case, here we also had \n          // to provide payload for it to trasnfer/dispatch \n          // necessary datas\n          dispatch(login({\n            email: userAuth.email,\n            uid: userAuth.uid,\n            displayName: userAuth.displayName,\n            photoUrl: userAuth.photoURL\n            // here when it sees you are already loggedin, it \n            // keeps you logged in as you are in that particular state\n          }))\n        } else {\n          // simply use dispath logout function\n          dispatch(logout())\n        }\n      })\n  }, []) \n\n\n\n  return (\n    <div className=\"App\">\n        <Header />\n\n          {/* if there is no user(no user state ie null) \n          then render a login page else render the\n          respective app body of user */}\n          {!user ? \n            (<Login />) :   (<div className=\"App_body\">\n                              <Sidebar />\n                              <Feed />\n                              <Widget />\n                            </div>)}\n        \n    </div>\n  );\n\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}